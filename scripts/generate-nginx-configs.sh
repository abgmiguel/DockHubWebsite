#!/bin/bash

# Generate nginx configurations for all sites in sites-config.json
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Configuration
FRONTEND_PORT="${FRONTEND_PORT:-80}"     # External port mapped to 4321
BACKEND_PORT="${BACKEND_PORT:-3001}"     # Backend API port
DOCKER_FRONTEND="${DOCKER_FRONTEND:-4321}"  # Internal Docker frontend port
DOCKER_BACKEND="${DOCKER_BACKEND:-3001}"   # Internal Docker backend port

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Nginx Configuration Generator${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "Port Configuration:"
echo "  Frontend: :${FRONTEND_PORT} → localhost:${DOCKER_FRONTEND}"
echo "  Backend API: :${BACKEND_PORT} → localhost:${DOCKER_BACKEND}"
echo ""

# Check if sites-config.json exists
if [ ! -f "sites-config.json" ]; then
    echo -e "${RED}Error: sites-config.json not found${NC}"
    exit 1
fi

# Check if jq is installed
if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is required but not installed${NC}"
    echo "Install with: apt-get install jq (Ubuntu) or brew install jq (Mac)"
    exit 1
fi

# Create nginx directories
mkdir -p nginx/sites-enabled
mkdir -p nginx/includes

# Get all domains from sites-config.json
domains=$(jq -r 'keys[]' sites-config.json)
count=0

echo -e "${YELLOW}Generating nginx configurations...${NC}"
echo ""

for domain in $domains; do
    # Skip www domains (they're handled in the main domain config)
    if [[ $domain == www.* ]]; then
        continue
    fi
    
    # Skip localhost, 127.*, and default domains (these are for local dev only)
    if [[ $domain == "localhost" ]] || [[ $domain == "127."* ]] || [[ $domain == "default" ]]; then
        echo "⏭️  Skipping local/default domain: ${domain}"
        continue
    fi
    
    # Get site info
    site_info=$(jq -r ".\"$domain\"" sites-config.json)
    site_id=$(echo "$site_info" | jq -r '.id')
    site_name="${domain%%.*}"
    
    echo "📄 Generating config for ${domain}..."
    
    # Check if this is a localhost domain
    is_localhost=false
    if [[ $domain == *".localhost" ]]; then
        is_localhost=true
    fi
    
    # Generate nginx config directly in sites-enabled
    cat > "nginx/sites-enabled/${domain}.conf" << EOF
# Nginx configuration for ${domain}
# Auto-generated by generate-nginx-configs.sh
# Generated: $(date)

EOF

    # Generate different config based on whether it's a localhost domain
    if [ "$is_localhost" = true ]; then
        # For localhost domains, only HTTP (no SSL)
        cat >> "nginx/sites-enabled/${domain}.conf" << EOF
server {
    listen 80;
    listen [::]:80;
    server_name ${domain};

    # No SSL redirect for localhost domains
EOF
    else
        # For production domains, use SSL
        cat >> "nginx/sites-enabled/${domain}.conf" << EOF
server {
    listen 80;
    listen [::]:80;
    server_name ${domain} www.${domain};

    # Redirect to HTTPS
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ${domain} www.${domain};

    # SSL Configuration (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/${domain}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${domain}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/${domain}/chain.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
EOF
    fi
    
    # Common configuration for both localhost and production
    cat >> "nginx/sites-enabled/${domain}.conf" << EOF

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

EOF
    
    # Only add include line if the include file exists locally
    if [ -f "nginx/includes/${site_id}-locations.conf" ]; then
        cat >> "nginx/sites-enabled/${domain}.conf" << EOF
    # Include custom site-specific configurations
    include /etc/nginx/includes/${site_id}-locations.conf;

EOF
        echo "  ✅ Added include for existing ${site_id}-locations.conf"
    fi
    
    # Continue with the rest of the config
    cat >> "nginx/sites-enabled/${domain}.conf" << EOF
    # Logging
    access_log /var/log/nginx/${site_id}_access.log;
    error_log /var/log/nginx/${site_id}_error.log;

    # Maximum upload size (100MB)
    client_max_body_size 100M;

    # Proxy timeouts
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
    proxy_read_timeout 600;
    send_timeout 600;

    # API routes - proxy to backend container
    location /api {
        proxy_pass http://127.0.0.1:${DOCKER_BACKEND};
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Site-Database "${site_id}_db";
    }

    # Serve uploads directly from nginx (more efficient than proxying)
    location /uploads {
        alias /var/www/docker/uploads;
        expires 30d;
        add_header Cache-Control "public, immutable";
        
        # Prevent directory listing
        autoindex off;
        
        # Only serve files, not directories
        try_files \$uri =404;
    }

    # WebSocket support (if needed)
    location /ws {
        proxy_pass http://127.0.0.1:${DOCKER_FRONTEND};
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Static assets with long cache
    location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|otf|eot)$ {
        proxy_pass http://127.0.0.1:${DOCKER_FRONTEND};
        expires 30d;
        add_header Cache-Control "public, immutable";
        proxy_http_version 1.1;
        proxy_set_header Host \$host;
    }

    # Main application - proxy to Astro SSR frontend
    location / {
        proxy_pass http://127.0.0.1:${DOCKER_FRONTEND};
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               application/vnd.ms-fontobject application/x-font-ttf 
               font/opentype;
}

EOF
    
    count=$((count + 1))
    echo "  ✅ Created nginx/sites-enabled/${domain}.conf"
done

# Create a master nginx include file with all upstreams
echo ""
echo "📄 Creating master upstream configuration..."

cat > "nginx/upstreams.conf" << EOF
# Upstream configurations for multi-tenant app
# Auto-generated by generate-nginx-configs.sh

# Frontend (Astro SSR)
upstream multi_tenant_frontend {
    server 127.0.0.1:${DOCKER_FRONTEND};
    keepalive 32;
}

# Backend API (Go)
upstream multi_tenant_backend {
    server 127.0.0.1:${DOCKER_BACKEND};
    keepalive 32;
}
EOF

echo "  ✅ Created nginx/upstreams.conf"

# Summary
echo ""
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Configuration Generation Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "Generated ${count} nginx configurations:"
for domain in $domains; do
    # Skip www, localhost, 127.*, and default domains
    if [[ $domain != www.* ]] && [[ $domain != "localhost" ]] && [[ $domain != "127."* ]] && [[ $domain != "default" ]]; then
        echo "  📁 nginx/sites-enabled/${domain}.conf"
    fi
done
echo ""
echo "Port mappings configured:"
echo "  Frontend: External(:${FRONTEND_PORT}) → Docker(:${DOCKER_FRONTEND})"
echo "  Backend: External(:${BACKEND_PORT}) → Docker(:${DOCKER_BACKEND})"
echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Review generated configs in nginx/sites-enabled/"
echo "2. Deploy to server: ./scripts/deploy-full.sh"
echo ""
echo -e "${YELLOW}To regenerate with custom ports:${NC}"
echo "  FRONTEND_PORT=8080 BACKEND_PORT=3001 ./scripts/generate-nginx-configs.sh"