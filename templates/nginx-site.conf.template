server {
    # Redirect HTTP to HTTPS
    listen 80;
    listen [::]:80;
    server_name {{DOMAIN}} www.{{DOMAIN}};
    return 301 https://$host$request_uri;
}

server {
    # HTTPS configuration
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name {{DOMAIN}} www.{{DOMAIN}};
    
    # Maximum upload size (25MB)
    client_max_body_size 25M;

    # SSL configuration (update paths as needed)
    ssl_certificate /etc/letsencrypt/live/{{DOMAIN}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{DOMAIN}}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{DOMAIN}}/chain.pem;

    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Set root directory
    root {{SERVER_PATH}}/dist/client;
    index index.html index.htm;

    # Logs
    access_log /var/log/nginx/{{DOMAIN}}.access.log;
    error_log /var/log/nginx/{{DOMAIN}}.error.log;

    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;

    # Include codersinflow server locations (API routes)
    include /etc/nginx/includes/codersinflow-locations.conf;

    # API proxy to backend
    location /api/ {
        proxy_pass http://127.0.0.1:{{BACKEND_PORT}};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header Cookie $http_cookie;
        proxy_pass_request_headers on;
    }

    # Uploaded files - serve directly from nginx
    location /uploads/ {
        alias {{SERVER_PATH}}/runtime/uploads/;
        expires 30d;
        add_header Cache-Control "public";
        try_files $uri =404;
    }

    # Static assets
    location /_astro/ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Main location - but exclude /uploads/
    location / {
        try_files $uri @astro;
    }
    
    # Other static files (but not from uploads directory)
    location ~* ^(?!/uploads/).*\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 30d;
        add_header Cache-Control "public";
    }

    # Astro server proxy
    location @astro {
        proxy_pass http://127.0.0.1:{{FRONTEND_PORT}};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Redirect www to non-www
    if ($host = www.{{DOMAIN}}) {
        return 301 https://{{DOMAIN}}$request_uri;
    }
}