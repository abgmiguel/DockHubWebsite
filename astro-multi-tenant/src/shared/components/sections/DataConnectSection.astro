---
export interface Props {
  data: {
    id: string;
    title: string;
    description: string;
    features: Array<{
      title: string;
      subtitle: string;
    }>;
    image: string;
  };
  imageOnRight: boolean;
}

const { data, imageOnRight } = Astro.props;
const uniqueId = `section-${data.id}`;
---

<section id={data.id} class="py-12 bg-transparent" data-section-id={uniqueId}>
  <div class="max-w-7xl mx-auto px-6 md:px-4 flex flex-col lg:flex-row items-center">
    <!-- Content section -->
    <div class={`w-full lg:w-1/2 space-y-8 px-4 lg:px-0 ${
      imageOnRight ? 'lg:pr-8' : 'lg:pl-8 lg:order-2'
    }`}>
      <h2 class={`text-4xl md:text-6xl font-bold text-text-primary transform transition-all duration-1000 opacity-0
        ${imageOnRight ? '-translate-x-32' : 'translate-x-32'}`} data-animate="title">
        {data.title}
      </h2>
      
      <p class={`text-text-secondary text-lg md:text-xl transform transition-all duration-1000 delay-200 opacity-0
        ${imageOnRight ? '-translate-x-32' : 'translate-x-32'}`} data-animate="description">
        {data.description}
      </p>

      <div class="space-y-6">
        {data.features.map((item, index) => (
          <div 
            class={`transform transition-all duration-1000 opacity-0
              ${imageOnRight ? '-translate-x-32' : 'translate-x-32'}`}
            data-animate="feature"
            style={`transition-delay: ${(index + 2) * 200}ms`}
          >
            <div class="text-2xl md:text-3xl font-bold text-text-primary">
              {item.title}
            </div>
            <div class="text-text-muted">
              {item.subtitle}
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Image section -->
    <div class={`w-full lg:w-1/2 mt-12 lg:mt-0 ${
      imageOnRight ? 'lg:order-2' : 'lg:order-1'
    }`}>
      <div class={`transform transition-all duration-1000 delay-500 opacity-0
        ${imageOnRight ? 'translate-x-32' : '-translate-x-32'}`} data-animate="image">
        <img
          src={data.image}
          alt="Feature illustration"
          width="600"
          height="400"
          class="w-full h-auto object-contain"
        />
      </div>
    </div>
  </div>
</section>

<script define:vars={{ uniqueId, imageOnRight }}>
  const section = document.querySelector(`[data-section-id="${uniqueId}"]`);
  if (!section) return;

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Animate all elements
        const elements = section.querySelectorAll('[data-animate]');
        elements.forEach(el => {
          el.classList.remove('opacity-0');
          if (imageOnRight) {
            el.classList.remove('-translate-x-32');
            el.classList.remove('translate-x-32');
          } else {
            el.classList.remove('translate-x-32');
            el.classList.remove('-translate-x-32');
          }
          el.classList.add('translate-x-0', 'opacity-100');
        });
      }
    });
  }, {
    threshold: 0.1,
    rootMargin: '-100px'
  });

  observer.observe(section);
</script>