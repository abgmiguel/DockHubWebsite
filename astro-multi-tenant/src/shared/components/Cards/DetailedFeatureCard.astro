---
export interface Props {
  title: string;
  description: string;
  features: string[];
  imageSrc?: string;
  imageAlt?: string;
  reverse?: boolean;
  gradient?: string;
  videoSrc?: string;
  youtubeUrl?: string;
}

const { title, description, features, imageSrc, imageAlt, reverse = false, gradient = 'from-gray-800 to-gray-900', videoSrc, youtubeUrl } = Astro.props;
---

<div class={`w-full py-16 ${reverse ? 'bg-gray-900' : 'bg-gray-950'}`}>
  <div class="max-w-7xl mx-auto px-4">
    <div class={`flex flex-col lg:flex-row items-center gap-12 ${reverse ? 'lg:flex-row-reverse' : ''}`}>
      <!-- Content Side -->
      <div class="flex-1 max-w-2xl">
        <h2 class="text-4xl md:text-5xl font-bold text-white mb-6">{title}</h2>
        <p class="text-xl text-gray-300 mb-8">{description}</p>
        
        <ul class="space-y-4">
          {features.map((feature) => (
            <li class="flex items-start">
              <div class="flex-shrink-0 w-6 h-6 rounded-full bg-indigo-600 flex items-center justify-center mt-0.5">
                <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
              <span class="ml-3 text-gray-300 text-lg">{feature}</span>
            </li>
          ))}
        </ul>
      </div>
      
      <!-- Image/Visual Side -->
      <div class="flex-1 max-w-2xl">
        {videoSrc ? (
          <div class="space-y-4">
            <video 
              class="w-full h-auto rounded-lg shadow-2xl lazy-video"
              controls
              loop
              muted
              autoplay
              playsinline
              preload="none"
              data-src={videoSrc}
            >
              <source data-src={videoSrc} type="video/mp4" />
              <source data-src={videoSrc} type="video/quicktime" />
              Your browser does not support the video tag.
            </video>
            {youtubeUrl && (
              <a 
                href={youtubeUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center justify-center w-full px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-lg transition-colors shadow-lg"
              >
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M19.615 3.184c-3.604-.246-11.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.385 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"/>
                </svg>
                Click for Full Video on YouTube
              </a>
            )}
          </div>
        ) : imageSrc ? (
          <img 
            src={imageSrc} 
            alt={imageAlt || title}
            class="w-full h-auto rounded-lg shadow-2xl"
          />
        ) : (
          <div class={`relative h-96 rounded-lg bg-gradient-to-br ${gradient} overflow-hidden`}>
            <!-- Placeholder visual - can be replaced with actual screenshots -->
            <div class="absolute inset-0 opacity-10">
              <div class="grid grid-cols-8 gap-2 p-4">
                {[...Array(64)].map((_, i) => (
                  <div class="h-8 bg-white/20 rounded"></div>
                ))}
              </div>
            </div>
            <div class="absolute inset-0 flex items-center justify-center">
              <div class="text-white/20 text-6xl font-bold">{title.split(' ')[0]}</div>
            </div>
          </div>
        )}
      </div>
    </div>
  </div>
</div>

<script>
  // Lazy load videos when they come into view
  document.addEventListener('DOMContentLoaded', () => {
    const lazyVideos = document.querySelectorAll('video.lazy-video');
    
    const videoObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const video = entry.target as HTMLVideoElement;
          const videoSrc = video.getAttribute('data-src');
          
          if (videoSrc) {
            // Set the src for all source elements
            const sources = video.querySelectorAll('source');
            sources.forEach(source => {
              const dataSrc = source.getAttribute('data-src');
              if (dataSrc) {
                source.setAttribute('src', dataSrc);
                source.removeAttribute('data-src');
              }
            });
            
            // Ensure attributes are set
            video.setAttribute('loop', 'true');
            video.setAttribute('muted', 'true');
            video.setAttribute('playsinline', 'true');
            video.setAttribute('autoplay', 'true');
            
            // Load the video
            video.load();
            
            // Wait for video to be ready then play
            video.addEventListener('loadeddata', () => {
              // Ensure video loops
              video.loop = true;
              video.muted = true;
              
              // Try to play
              const playPromise = video.play();
              
              if (playPromise !== undefined) {
                playPromise.then(() => {
                  // Autoplay started successfully
                  console.log('Video autoplay started');
                }).catch(error => {
                  // Autoplay was prevented
                  console.log('Video autoplay prevented:', error);
                  // Add a play button overlay if autoplay fails
                  const parent = video.parentElement;
                  if (parent && !parent.querySelector('.play-overlay')) {
                    const playOverlay = document.createElement('div');
                    playOverlay.className = 'play-overlay absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 cursor-pointer rounded-lg';
                    playOverlay.innerHTML = `
                      <svg class="w-16 h-16 text-white" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                      </svg>
                    `;
                    playOverlay.onclick = () => {
                      video.play();
                      playOverlay.remove();
                    };
                    parent.style.position = 'relative';
                    parent.appendChild(playOverlay);
                  }
                });
              }
            }, { once: true });
            
            // Remove the lazy class and stop observing
            video.classList.remove('lazy-video');
            video.removeAttribute('data-src');
            videoObserver.unobserve(video);
          }
        }
      });
    }, {
      rootMargin: '50px' // Start loading 50px before the video comes into view
    });
    
    lazyVideos.forEach(video => {
      videoObserver.observe(video);
    });
  });
</script>