---
// No props needed for this component
---

<header class="fixed top-0 left-0 right-0 z-50 bg-gray-900/95 backdrop-blur-xl border-b border-gray-700 text-white transition-all duration-300" id="main-header">
  <div class="absolute inset-0 bg-gradient-to-r from-indigo-500/10 via-purple-500/10 to-pink-500/10"></div>
  <div class="w-full px-4 md:px-6 py-2 flex justify-between items-center relative min-h-[56px]">
    <div class="flex items-center">
      <div class="flex items-center group">
        <div class="relative">
          <div class="absolute -inset-1 bg-gradient-to-r from-indigo-500 to-purple-500 rounded blur opacity-25 group-hover:opacity-75 transition duration-300"></div>
          <div class="relative flex items-center space-x-1.5">
            <div class="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded flex items-center justify-center flex-shrink-0">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4"></path>
              </svg>
            </div>
            <span class="text-xs sm:text-sm md:text-base font-bold bg-gradient-to-r from-gray-100 to-gray-300 bg-clip-text text-transparent ml-2 truncate">Coders in Flow</span>
          </div>
        </div>
      </div>
      <nav class="hidden md:flex items-center space-x-1">
        <a href="#features" class="px-3 py-1.5 rounded-lg hover:bg-gray-800/50 transition-all duration-200 text-gray-300 hover:text-white relative group text-sm">
          <span class="relative z-10">Features</span>
          <div class="absolute inset-0 bg-gradient-to-r from-indigo-500/0 to-purple-500/0 group-hover:from-indigo-500/10 group-hover:to-purple-500/10 rounded-lg transition-all duration-300"></div>
          <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-indigo-500 to-purple-500 group-hover:w-full transition-all duration-300"></div>
        </a>
        <a href="#pricing" class="px-3 py-1.5 rounded-lg hover:bg-gray-800/50 transition-all duration-200 text-gray-300 hover:text-white relative group text-sm">
          <span class="relative z-10">Pricing</span>
          <div class="absolute inset-0 bg-gradient-to-r from-indigo-500/0 to-purple-500/0 group-hover:from-indigo-500/10 group-hover:to-purple-500/10 rounded-lg transition-all duration-300"></div>
          <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-indigo-500 to-purple-500 group-hover:w-full transition-all duration-300"></div>
        </a>
        <a href="#docs" class="px-3 py-1.5 rounded-lg hover:bg-gray-800/50 transition-all duration-200 text-gray-300 hover:text-white relative group text-sm">
          <span class="relative z-10">Documentation</span>
          <div class="absolute inset-0 bg-gradient-to-r from-indigo-500/0 to-purple-500/0 group-hover:from-indigo-500/10 group-hover:to-purple-500/10 rounded-lg transition-all duration-300"></div>
          <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-indigo-500 to-purple-500 group-hover:w-full transition-all duration-300"></div>
        </a>
        <a href="#about" class="px-3 py-1.5 rounded-lg hover:bg-gray-800/50 transition-all duration-200 text-gray-300 hover:text-white relative group text-sm">
          <span class="relative z-10">About</span>
          <div class="absolute inset-0 bg-gradient-to-r from-indigo-500/0 to-purple-500/0 group-hover:from-indigo-500/10 group-hover:to-purple-500/10 rounded-lg transition-all duration-300"></div>
          <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-indigo-500 to-purple-500 group-hover:w-full transition-all duration-300"></div>
        </a>
      </nav>
    </div>
    <!-- Right side content wrapper -->
    <div class="flex items-center">
      <!-- Mobile menu button -->
      <button 
        class="p-1.5 rounded-lg bg-indigo-600 hover:bg-indigo-700 text-white" 
        id="mobile-menu-btn"
        style="display: none;"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
      
      <!-- Desktop buttons -->
      <div 
        class="flex items-center space-x-4" 
        id="desktop-buttons"
        style="display: none;"
      >
        <button class="px-3 py-1.5 text-gray-300 hover:text-white transition-colors text-sm">
          Sign In
        </button>
        <button class="relative group overflow-hidden rounded-lg">
          <div class="absolute inset-0 bg-gradient-to-r from-indigo-500 to-purple-500 blur-sm opacity-60 group-hover:opacity-100 transition duration-300"></div>
          <span class="relative flex items-center px-3 md:px-4 py-1.5 bg-gray-900 rounded-lg text-white font-medium group-hover:bg-gray-800 transition-colors text-sm m-0.5">
            Get Started
            <svg class="w-3.5 h-3.5 ml-1.5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
            </svg>
          </span>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Mobile menu -->
  <div class="md:hidden absolute left-0 right-0 top-full bg-gray-900/95 backdrop-blur-xl border-b border-gray-800/50 transform -translate-y-full transition-transform duration-300 ease-out z-50" id="mobile-menu">
    <nav class="container mx-auto px-4 py-4 flex flex-col space-y-2">
      <a href="#features" class="px-4 py-2 rounded-lg hover:bg-gray-800/50 transition-all duration-200 text-gray-300 hover:text-white">Features</a>
      <a href="#pricing" class="px-4 py-2 rounded-lg hover:bg-gray-800/50 transition-all duration-200 text-gray-300 hover:text-white">Pricing</a>
      <a href="#docs" class="px-4 py-2 rounded-lg hover:bg-gray-800/50 transition-all duration-200 text-gray-300 hover:text-white">Documentation</a>
      <a href="#about" class="px-4 py-2 rounded-lg hover:bg-gray-800/50 transition-all duration-200 text-gray-300 hover:text-white">About</a>
      <div class="pt-2 mt-2 border-t border-gray-800/50">
        <button class="w-full px-4 py-2 text-gray-300 hover:text-white transition-colors text-left">Sign In</button>
        <button class="w-full mt-2 relative group">
          <div class="absolute -inset-0.5 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-lg blur opacity-60 group-hover:opacity-100 transition duration-300"></div>
          <span class="relative flex items-center justify-center px-4 py-2 bg-gray-900 rounded-lg text-white font-medium group-hover:bg-gray-800 transition-colors text-sm w-full">
            Get Started
            <svg class="w-3.5 h-3.5 ml-1.5 group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
            </svg>
          </span>
        </button>
      </div>
    </nav>
  </div>
</header>

<!-- Removed CSS to let JavaScript handle display -->

<script>
  // Handle responsive display
  function updateHeaderDisplay() {
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const desktopButtons = document.getElementById('desktop-buttons');
    const width = window.innerWidth;
    
    if (width < 768) {
      // Mobile view
      if (mobileMenuBtn) {
        mobileMenuBtn.style.display = 'block';
        mobileMenuBtn.style.visibility = 'visible';
        mobileMenuBtn.style.opacity = '1';
      }
      if (desktopButtons) {
        desktopButtons.style.setProperty('display', 'none', 'important');
        desktopButtons.style.setProperty('visibility', 'hidden', 'important');
        desktopButtons.style.setProperty('opacity', '0', 'important');
        desktopButtons.style.setProperty('width', '0', 'important');
        desktopButtons.style.setProperty('height', '0', 'important');
        desktopButtons.style.setProperty('overflow', 'hidden', 'important');
      }
    } else {
      // Desktop view
      if (mobileMenuBtn) {
        mobileMenuBtn.style.display = 'none';
      }
      if (desktopButtons) {
        desktopButtons.style.setProperty('display', 'flex', 'important');
        desktopButtons.style.setProperty('visibility', 'visible', 'important');
        desktopButtons.style.setProperty('opacity', '1', 'important');
        desktopButtons.style.setProperty('width', 'auto', 'important');
        desktopButtons.style.setProperty('height', 'auto', 'important');
        desktopButtons.style.setProperty('overflow', 'visible', 'important');
      }
    }
  }
  
  // Run on load and resize
  updateHeaderDisplay();
  window.addEventListener('resize', updateHeaderDisplay);
  
  // Add scroll effect to header
  let lastScroll = 0;
  const header = document.getElementById('main-header');
  console.log('[Header Debug] Header element found:', !!header);
  
  window.addEventListener('scroll', () => {
    const currentScroll = window.pageYOffset;
    
    if (currentScroll > 100) {
      header?.classList.add('shadow-2xl');
      header?.classList.add('bg-gray-900/95');
      header?.classList.remove('bg-gray-900/80');
    } else {
      header?.classList.remove('shadow-2xl');
      header?.classList.remove('bg-gray-900/95');
      header?.classList.add('bg-gray-900/80');
    }
    
    lastScroll = currentScroll;
  });

  // Mobile menu functionality
  const mobileMenuBtn = document.getElementById('mobile-menu-btn');
  const mobileMenu = document.getElementById('mobile-menu');
  console.log('[Header Debug] Mobile menu button found:', !!mobileMenuBtn);
  console.log('[Header Debug] Mobile menu found:', !!mobileMenu);
  
  // Check visibility of elements
  if (mobileMenuBtn) {
    const btnStyles = window.getComputedStyle(mobileMenuBtn);
    console.log('[Header Debug] Mobile menu button display:', btnStyles.display);
    console.log('[Header Debug] Mobile menu button visibility:', btnStyles.visibility);
    console.log('[Header Debug] Mobile menu button dimensions:', mobileMenuBtn.offsetWidth, 'x', mobileMenuBtn.offsetHeight);
    console.log('[Header Debug] Mobile menu button z-index:', btnStyles.zIndex);
    console.log('[Header Debug] Mobile menu button position:', btnStyles.position);
    console.log('[Header Debug] Mobile menu button opacity:', btnStyles.opacity);
  }
  
  // Check logo visibility
  const logo = document.querySelector('.w-8.h-8.bg-gradient-to-br');
  if (logo) {
    const logoStyles = window.getComputedStyle(logo);
    console.log('[Header Debug] Logo display:', logoStyles.display);
    console.log('[Header Debug] Logo visibility:', logoStyles.visibility);
    console.log('[Header Debug] Logo dimensions:', logo.offsetWidth, 'x', logo.offsetHeight);
  }
  
  // Check header visibility and positioning
  if (header) {
    const headerStyles = window.getComputedStyle(header);
    console.log('[Header Debug] Header position:', headerStyles.position);
    console.log('[Header Debug] Header z-index:', headerStyles.zIndex);
    console.log('[Header Debug] Header height:', header.offsetHeight);
    console.log('[Header Debug] Header top:', headerStyles.top);
  }
  
  let isMenuOpen = false;

  mobileMenuBtn?.addEventListener('click', () => {
    console.log('[Header Debug] Mobile menu button clicked');
    isMenuOpen = !isMenuOpen;
    console.log('[Header Debug] Menu open state:', isMenuOpen);
    if (isMenuOpen) {
      mobileMenu?.classList.remove('-translate-y-full');
      mobileMenu?.classList.add('translate-y-0');
      // Change hamburger to X
      mobileMenuBtn.innerHTML = `
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      `;
    } else {
      mobileMenu?.classList.add('-translate-y-full');
      mobileMenu?.classList.remove('translate-y-0');
      // Change X back to hamburger
      mobileMenuBtn.innerHTML = `
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      `;
    }
  });

  // Close menu when clicking on a link
  mobileMenu?.querySelectorAll('a').forEach(link => {
    link.addEventListener('click', () => {
      isMenuOpen = false;
      mobileMenu?.classList.add('-translate-y-full');
      mobileMenu?.classList.remove('translate-y-0');
      mobileMenuBtn.innerHTML = `
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      `;
    });
  });
</script>