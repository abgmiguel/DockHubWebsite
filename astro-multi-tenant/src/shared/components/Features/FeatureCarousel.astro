---
const { data = [] } = Astro.props;
// If data is an array, use it directly as items; otherwise extract items property
const items = Array.isArray(data) ? data : (data.items || []);
---

<div 
  id="feature-carousel" 
  class="w-full bg-background py-8 select-none transition-opacity duration-1000 opacity-0"
>
  <div class="max-w-[95vw] mx-auto">
    <div class="relative">
      <div 
        id="carousel-container"
        class="overflow-hidden cursor-grab active:cursor-grabbing"
      >
        <div 
          id="carousel-track"
          class="flex gap-2 transition-transform duration-500 ease-out mb-12"
        >
          {items.map((item, index) => (
            <div
              data-index={index}
              class="carousel-item w-full md:w-1/2 lg:w-1/3 xl:w-1/4 flex-shrink-0 transition-all duration-300"
            >
              <div class="rounded-lg overflow-hidden">
                <div 
                  class="relative w-full flex items-center justify-center cursor-pointer"
                  data-image-src={item.imageSrc}
                  data-image-title={item.title}
                  data-image-description={item.description}
                >
                  <img
                    src={item.imageSrc}
                    alt={item.title}
                    width="800"
                    height="600"
                    class="w-full h-auto object-contain rounded-lg hover:opacity-90 transition-opacity"
                    draggable="false"
                    loading="lazy"
                  />
                </div>
                <div class="text-center">
                  <h3 class="text-lg font-semibold text-text-primary">
                    {item.title}
                  </h3>
                  <p class="text-sm text-text-muted">
                    {item.description}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <button
        id="carousel-prev"
        class="absolute left-0 top-1/2 -translate-y-1/2 -ml-4 bg-surface p-2 rounded-full text-text-primary hover:bg-surface/80 transition-colors disabled:opacity-50 disabled:cursor-not-allowed z-10"
        disabled
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      <button
        id="carousel-next"
        class="absolute right-0 top-1/2 -translate-y-1/2 -mr-4 bg-surface p-2 rounded-full text-text-primary hover:bg-surface/80 transition-colors disabled:opacity-50 disabled:cursor-not-allowed z-10"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <div class="flex justify-center mt-12 gap-2 pb-8">
        {items.map((_, index) => (
          <button
            data-dot={index}
            class={`carousel-dot w-2 h-2 rounded-full transition-colors ${
              index === 0 ? 'bg-text-primary' : 'bg-text-muted'
            }`}
          />
        ))}
      </div>
    </div>
  </div>
</div>

<!-- Modal/Popup -->
<div 
  id="image-modal"
  class="fixed inset-0 bg-background/90 z-50 flex items-center justify-center p-8 hidden"
>
  <div class="relative w-full max-w-[90vw] h-full max-h-[85vh] flex flex-col">
    <button
      id="modal-close"
      class="absolute -top-12 right-0 text-text-primary hover:text-text-secondary transition-colors"
    >
      <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
    </button>
    <div class="flex flex-col items-center h-full overflow-y-auto py-4">
      <img
        id="modal-image"
        src=""
        alt=""
        width="1200"
        height="800"
        class="max-w-full max-h-[90vh] object-contain"
      />
      <div class="text-center w-full pb-4">
        <h2 id="modal-title" class="text-xl font-semibold text-text-primary mb-2"></h2>
        <p id="modal-description" class="text-text-secondary"></p>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ itemCount: items.length }}>
  let currentIndex = 0;
  let itemsPerView = 1;
  let startPos = null;
  let isVisible = false;

  const carousel = document.getElementById('feature-carousel');
  const track = document.getElementById('carousel-track');
  const container = document.getElementById('carousel-container');
  const prevBtn = document.getElementById('carousel-prev');
  const nextBtn = document.getElementById('carousel-next');
  const modal = document.getElementById('image-modal');
  const modalClose = document.getElementById('modal-close');
  const modalImage = document.getElementById('modal-image');
  const modalTitle = document.getElementById('modal-title');
  const modalDescription = document.getElementById('modal-description');
  const dots = document.querySelectorAll('[data-dot]');
  const carouselItems = document.querySelectorAll('.carousel-item');

  function updateItemsPerView() {
    if (window.innerWidth >= 1280) itemsPerView = 4; // xl
    else if (window.innerWidth >= 1024) itemsPerView = 3; // lg
    else if (window.innerWidth >= 768) itemsPerView = 2; // md
    else itemsPerView = 1; // mobile
    updateCarousel();
  }

  function updateCarousel() {
    if (track) {
      track.style.transform = `translateX(-${currentIndex * (100 / itemsPerView)}%)`;
    }

    // Update buttons
    if (prevBtn) {
      prevBtn.disabled = currentIndex === 0;
    }
    if (nextBtn) {
      nextBtn.disabled = currentIndex >= itemCount - itemsPerView;
    }

    // Update dots
    dots.forEach((dot, index) => {
      dot.classList.toggle('bg-text-primary', index === currentIndex);
      dot.classList.toggle('bg-text-muted', index !== currentIndex);
    });

    // Update scale effect
    carouselItems.forEach((item, index) => {
      const isCenter = index === currentIndex + Math.floor(itemsPerView / 2);
      item.style.transform = `scale(${isCenter ? 1.1 : 0.9})`;
      item.style.zIndex = isCenter ? '2' : '1';
    });
  }

  function nextSlide() {
    const maxIndex = itemCount - itemsPerView;
    if (currentIndex < maxIndex) {
      currentIndex++;
      updateCarousel();
    }
  }

  function prevSlide() {
    if (currentIndex > 0) {
      currentIndex--;
      updateCarousel();
    }
  }

  function openModal(imageSrc, title, description) {
    if (modal && modalImage && modalTitle && modalDescription) {
      modalImage.src = imageSrc;
      modalTitle.textContent = title;
      modalDescription.textContent = description;
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
  }

  function closeModal() {
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = 'unset';
    }
  }

  // Event listeners
  if (prevBtn) prevBtn.addEventListener('click', prevSlide);
  if (nextBtn) nextBtn.addEventListener('click', nextSlide);
  if (modalClose) modalClose.addEventListener('click', closeModal);
  if (modal) modal.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });

  // Dot navigation
  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      currentIndex = index;
      updateCarousel();
    });
  });

  // Image click to open modal
  document.querySelectorAll('[data-image-src]').forEach(img => {
    img.addEventListener('click', () => {
      const src = img.dataset.imageSrc;
      const title = img.dataset.imageTitle;
      const description = img.dataset.imageDescription;
      openModal(src, title, description);
    });
  });

  // Touch/mouse drag support
  let touchStartX = 0;
  let touchEndX = 0;

  function handleGestureStart(e) {
    touchStartX = e.type.includes('mouse') ? e.clientX : e.touches[0].clientX;
  }

  function handleGestureEnd(e) {
    touchEndX = e.type.includes('mouse') ? e.clientX : e.changedTouches[0].clientX;
    handleGesture();
  }

  function handleGesture() {
    const diff = touchStartX - touchEndX;
    if (Math.abs(diff) > 50) {
      if (diff > 0) {
        nextSlide();
      } else {
        prevSlide();
      }
    }
  }

  if (container) {
    container.addEventListener('touchstart', handleGestureStart);
    container.addEventListener('touchend', handleGestureEnd);
    container.addEventListener('mousedown', handleGestureStart);
    container.addEventListener('mouseup', handleGestureEnd);
  }

  // Visibility animation
  function handleScroll() {
    if (!carousel) return;
    const rect = carousel.getBoundingClientRect();
    const isInView = rect.top < window.innerHeight - 100;
    if (isInView && !isVisible) {
      isVisible = true;
      carousel.classList.remove('opacity-0');
      carousel.classList.add('opacity-100');
    }
  }

  // Initialize
  window.addEventListener('resize', updateItemsPerView);
  window.addEventListener('scroll', handleScroll);
  updateItemsPerView();
  handleScroll();
</script>