---
export const prerender = false;

import { API_URL } from '../../../shared/lib/api-config';

// Get database from props
const { database, tenant } = Astro.props;

// Check authentication
const token = Astro.cookies.get('auth-token');
if (!token) {
  return Astro.redirect('/blog/editor/login');
}

// Fetch user info
const userResponse = await fetch(`${API_URL}/api/auth/me`, {
  headers: {
    'Cookie': `auth-token=${token.value}`,
    'X-Site-Database': database
  }
});

if (!userResponse.ok) {
  return Astro.redirect('/blog/editor/login');
}

const user = await userResponse.json();
---

<div class="min-h-screen bg-background">
    <!-- Editor Header -->
    <header class="bg-surface border-b border-border">
      <div class="container mx-auto px-4 py-4">
        <div class="flex justify-between items-center">
          <h1 class="text-xl font-bold text-text-primary">Change Password</h1>
          <a href="/blog/editor" class="text-text-muted hover:text-text-primary">
            ‚Üê Back to Dashboard
          </a>
        </div>
      </div>
    </header>

    <main class="container mx-auto px-4 py-8 max-w-md">
      <div class="bg-surface rounded-lg p-6">
        <form id="changePasswordForm">
          <div class="mb-4">
            <label for="currentPassword" class="block text-sm font-medium text-text-secondary mb-2">
              Current Password
            </label>
            <input
              type="password"
              id="currentPassword"
              name="currentPassword"
              required
              class="w-full px-3 py-2 bg-surface-hover border border-border rounded-md text-text-primary focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>

          <div class="mb-4">
            <label for="newPassword" class="block text-sm font-medium text-text-secondary mb-2">
              New Password
            </label>
            <input
              type="password"
              id="newPassword"
              name="newPassword"
              required
              minlength="8"
              class="w-full px-3 py-2 bg-surface-hover border border-border rounded-md text-text-primary focus:outline-none focus:ring-2 focus:ring-primary"
            />
            <p class="mt-1 text-sm text-text-muted">Must be at least 8 characters</p>
          </div>

          <div class="mb-6">
            <label for="confirmPassword" class="block text-sm font-medium text-text-secondary mb-2">
              Confirm New Password
            </label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              required
              minlength="8"
              class="w-full px-3 py-2 bg-surface-hover border border-border rounded-md text-text-primary focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>

          <div id="errorMessage" class="mb-4 text-error text-sm hidden"></div>
          <div id="successMessage" class="mb-4 text-green-400 text-sm hidden"></div>

          <button
            type="submit"
            class="w-full px-4 py-2 bg-primary hover:bg-primary/90 text-text-primary font-medium rounded-md transition-colors"
          >
            Change Password
          </button>
        </form>
      </div>
    </main>
  </div>

<script define:vars={{ API_URL, database }}>
  const form = document.getElementById('changePasswordForm') as HTMLFormElement;
  const errorMessage = document.getElementById('errorMessage');
  const successMessage = document.getElementById('successMessage');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Hide messages
    errorMessage?.classList.add('hidden');
    successMessage?.classList.add('hidden');

    // Get form data
    const formData = new FormData(form);
    const currentPassword = formData.get('currentPassword') as string;
    const newPassword = formData.get('newPassword') as string;
    const confirmPassword = formData.get('confirmPassword') as string;

    // Validate passwords match
    if (newPassword !== confirmPassword) {
      if (errorMessage) {
        errorMessage.textContent = 'New passwords do not match';
        errorMessage.classList.remove('hidden');
      }
      return;
    }

    try {
      const response = await fetch(`${API_URL}/api/auth/change-password`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Site-Database': database
        },
        credentials: 'include',
        body: JSON.stringify({
          currentPassword,
          newPassword,
        }),
      });

      if (!response.ok) {
        const text = await response.text();
        throw new Error(text || 'Failed to change password');
      }

      // Show success message
      if (successMessage) {
        successMessage.textContent = 'Password changed successfully!';
        successMessage.classList.remove('hidden');
      }

      // Clear form
      form.reset();

      // Redirect after a short delay
      setTimeout(() => {
        window.location.href = '/blog/editor';
      }, 2000);
    } catch (error) {
      if (errorMessage) {
        errorMessage.textContent = error instanceof Error ? error.message : 'Failed to change password';
        errorMessage.classList.remove('hidden');
      }
    }
  });
</script>