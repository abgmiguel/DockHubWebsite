---
export const prerender = false;

import { API_URL } from '../../../shared/lib/api-config';

// Get database from props
const { database, tenant } = Astro.props;

// If already logged in, redirect to editor
const token = Astro.cookies.get('auth-token');
if (token) {
  return Astro.redirect('/blog/editor');
}
---

<main class="min-h-screen flex items-center justify-center bg-background">
    <div class="bg-surface p-8 rounded-lg shadow-xl w-full max-w-md">
      <h1 class="text-2xl font-bold text-center mb-6">Create Account</h1>
      
      <form id="registerForm" class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium mb-2">Name</label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class="w-full px-3 py-2 bg-surface-hover rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="John Doe"
          />
        </div>
        
        <div>
          <label for="email" class="block text-sm font-medium mb-2">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-3 py-2 bg-surface-hover rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="john@example.com"
          />
        </div>
        
        <div>
          <label for="password" class="block text-sm font-medium mb-2">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            required
            minlength="8"
            class="w-full px-3 py-2 bg-surface-hover rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
            placeholder="••••••••"
          />
          <p class="text-xs text-text-muted mt-1">Minimum 8 characters</p>
        </div>
        
        <div id="error" class="text-error text-sm hidden"></div>
        <div id="success" class="text-green-400 text-sm hidden"></div>
        
        <button
          type="submit"
          class="w-full py-2 px-4 bg-primary hover:bg-primary/90 rounded-md font-medium transition-colors"
        >
          Register
        </button>
      </form>
      
      <p class="text-center mt-4 text-sm text-text-muted">
        Already have an account? 
        <a href="/blog/editor/login" class="text-link hover:text-link-hover">Login</a>
      </p>
      
      <div class="mt-6 p-4 bg-yellow-900/20 border border-yellow-700 rounded-lg">
        <p class="text-sm text-yellow-400">
          <strong>Note:</strong> New accounts require admin approval before you can login.
        </p>
      </div>
    </div>
  </main>

<script define:vars={{ API_URL, database }}>
  const form = document.getElementById('registerForm') as HTMLFormElement;
  const errorDiv = document.getElementById('error') as HTMLDivElement;
  const successDiv = document.getElementById('success') as HTMLDivElement;
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    errorDiv.classList.add('hidden');
    successDiv.classList.add('hidden');
    
    const formData = new FormData(form);
    const data = {
      name: formData.get('name'),
      email: formData.get('email'),
      password: formData.get('password')
    };
    
    try {
      const response = await fetch(`${API_URL}/api/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Site-Database': database
        },
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        successDiv.textContent = 'Registration successful! Please wait for admin approval.';
        successDiv.classList.remove('hidden');
        form.reset();
      } else {
        let errorMessage = 'Registration failed';
        
        // Handle different HTTP status codes
        if (response.status === 409) {
          errorMessage = 'Email already registered';
        } else if (response.status === 400) {
          errorMessage = 'Invalid registration data - please check all fields';
        } else if (response.status === 500) {
          errorMessage = 'Server error - please try again later';
        } else if (response.status === 503) {
          errorMessage = 'Database unavailable - please contact support';
        }
        
        // Try to get more specific error from response body
        try {
          const text = await response.text();
          if (text && text.length > 0 && text.length < 200) {
            errorMessage = text;
          }
        } catch (e) {
          // Use the status-based message if we can't parse the response
        }
        
        errorDiv.textContent = errorMessage;
        errorDiv.classList.remove('hidden');
      }
    } catch (error: any) {
      // Provide more specific network error messages
      let errorMessage = 'Connection failed';
      
      if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
        errorMessage = `Cannot connect to API server at ${API_URL}. Please ensure the backend is running.`;
      } else if (error.name === 'NetworkError') {
        errorMessage = 'Network error - please check your connection';
      } else if (error.message) {
        errorMessage = `Error: ${error.message}`;
      }
      
      errorDiv.textContent = errorMessage;
      errorDiv.classList.remove('hidden');
    }
  });
</script>